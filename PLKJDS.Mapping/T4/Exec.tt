<#@ template language="C#" debug="True" #>
<#@ assembly name="System.Core" #>
<#@ output extension="cs" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="T4Toolbox.tt" #>
<#@ include file="Configuration.ttinclude" #>
<#@ include file="ConfigurationFactory.ttinclude" #>
<#
    string coreName = "PLKJDS", projectName = coreName + ".Mapping", entityProjectName = coreName + ".Entity";
    string entityBaseModelName = entityProjectName + ".EntityBaseModel";
    string entityBaseModelNameForReflection = entityProjectName + ".EntityModelBaseForReflection";
    //当前完整路径
    string currentPath = Path.GetDirectoryName(Host.TemplateFile);
    //T4文件夹的父级文件夹路径
    string projectPath = currentPath.Substring(0, currentPath.IndexOf(@"\T4"));
    //解决方案路径
    string solutionFolderPath = currentPath.Substring(0, currentPath.IndexOf(@"\" + projectName)); 

    //加载数据实体.dll
    string entityFilePath = string.Concat(solutionFolderPath, ("\\"+ entityProjectName +"\\bin\\Debug\\" + entityProjectName + ".dll"));
    byte[] fileData = File.ReadAllBytes(entityFilePath);
    Assembly assembly = Assembly.Load(fileData);
    //反射出实体类，不知道为啥此处不能成功判定“是否继承EntityModelBaseForReflection类”
    //因此只能通过名称比较的方式来判定
    IEnumerable<Type> modelTypes = assembly.GetTypes().Where(m => m.IsClass && !m.IsAbstract).Where(m => m.BaseType.BaseType != null && m.BaseType.BaseType.FullName.Equals(entityBaseModelNameForReflection));

   //循环实体类
    List<string> prefixNames = new List<string>();
    foreach (Type item in modelTypes)
    {								
        //找 实体文件夹 名称
        string tempNamespace= item.Namespace, nameSpaceWithoutProjectName = tempNamespace.Substring(entityProjectName.Length);
        //if(nameSpaceWithoutProjectName.IndexOf(".") != 0 || nameSpaceWithoutProjectName.LastIndexOf(".") > 0)
        //{ continue; }

        //是否直接继承实体基本类
        bool purity = item.BaseType.FullName.Equals(entityBaseModelNameForReflection);
        //实体所在的数据库标识名称
        string targetName = nameSpaceWithoutProjectName =="" ? "" : nameSpaceWithoutProjectName.Substring(1);
        if(targetName != "" && !prefixNames.Any(a => a == targetName)){ prefixNames.Add(targetName); }
        //目标文件的路径和名称（嵌套Generate文件夹是为了标识T4生成的类文件）
        string fileName= targetName + @"\Generate\" + item.Name + "Configuration.cs";
    
        //配置文件
        string folderName= @"\Configurations\";
        Configuration configuration = new Configuration(item.Name, targetName, purity);
        configuration.Output.Encoding = Encoding.UTF8;
        string path = projectPath + folderName + fileName;
        configuration.RenderToFile(path);
    }

	if (prefixNames != null && prefixNames.Count() > 0 )
	{
		foreach(string prefixName in prefixNames)
		{
			//配置工厂文件
			string fileName = prefixName + "ConfigurationFactory.Generate.cs";
			ConfigurationFactory configurationFactory = new ConfigurationFactory(prefixName);
			configurationFactory.Output.Encoding = Encoding.UTF8;
			string path = string.Format(@"{0}\ConfigurationFactories\", projectPath) + fileName;
			configurationFactory.RenderToFile(path);
		}
	}
	else
	{
		//配置工厂文件
		string fileName = "ConfigurationFactory.Generate.cs";
		ConfigurationFactory configurationFactory = new ConfigurationFactory("");
		configurationFactory.Output.Encoding = Encoding.UTF8;
		string path = string.Format(@"{0}\ConfigurationFactories\", projectPath) + fileName;
		configurationFactory.RenderToFile(path);
	}
#>
